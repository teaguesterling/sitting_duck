# name: test/sql/duckdb_parser_test.test
# description: Test DuckDB native parser integration
# group: [sitting_duck]

require sitting_duck

statement ok
LOAD sitting_duck;

# Test 1: DuckDB language is supported
# ===================================

query I
SELECT language FROM ast_supported_languages() WHERE language = 'duckdb';
----
duckdb

# Test 2: Simple SELECT statement parsing
# =======================================

query IIIIII
SELECT node_id, parent_id, type, name, semantic_type, start_line 
FROM parse_ast('SELECT id, name FROM users', 'duckdb') 
ORDER BY node_id 
LIMIT 10;
----
1	0	program	(empty)	252	1
2	1	select_statement	(empty)	224	1
3	2	select_node	(empty)	224	1
4	3	select_list	(empty)	188	1
5	4	column_reference	id	80	1
6	4	column_reference	name	80	1
7	3	table_reference	users	84	1

# Test 3: Complex query with JOIN and WHERE
# ==========================================

query III
SELECT type, semantic_type_to_string(semantic_type) as semantic_type, COUNT(*) as count
FROM parse_ast('
SELECT u.name, p.title 
FROM users u 
JOIN posts p ON u.id = p.user_id 
WHERE u.active = true
', 'duckdb')
GROUP BY type, semantic_type
ORDER BY type ASC, semantic_type ASC;
----
cast_expression	COMPUTATION_EXPRESSION	1
column_reference	NAME_IDENTIFIER	3
comparison	OPERATOR_COMPARISON	1
join	TRANSFORM_ITERATION	1
program	DEFINITION_MODULE	1
select_list	ORGANIZATION_CONTAINER	1
select_node	TRANSFORM_QUERY	1
select_statement	TRANSFORM_QUERY	1
table_reference	NAME_QUALIFIED	2
where_clause	FLOW_CONDITIONAL	1

# Test 4: CTE (Common Table Expression) parsing
# ==============================================

query II
SELECT type, name
FROM parse_ast('
WITH active_users AS (
  SELECT * FROM users WHERE active = true
)
SELECT name FROM active_users
', 'duckdb')
WHERE type IN ('select_statement', 'select_node')
ORDER BY type;
----
select_statement	(empty)

# Test 5: Function call recognition
# =================================

query II
SELECT type, name
FROM parse_ast('SELECT COUNT(*), MAX(created_at) FROM posts', 'duckdb')
WHERE type = 'function_call'
ORDER BY name;
----
function_call	count_star
function_call	max

# Test 6: Error handling for invalid SQL
# ======================================

query I
SELECT COUNT(*) FROM parse_ast('SELECT FROM', 'duckdb') WHERE type = 'parse_error';
----
1

# Test 7: Compare DuckDB vs tree-sitter SQL parsing
# ==================================================

query III
SELECT 
    'duckdb' as parser_type,
    COUNT(*) as total_nodes,
    COUNT(CASE WHEN name IS NOT NULL THEN 1 END) as named_nodes
FROM parse_ast('SELECT u.name, COUNT(*) FROM users u GROUP BY u.name', 'duckdb')
UNION ALL
SELECT 
    'tree-sitter' as parser_type,
    COUNT(*) as total_nodes,
    COUNT(CASE WHEN name IS NOT NULL THEN 1 END) as named_nodes
FROM parse_ast('SELECT u.name, COUNT(*) FROM users u GROUP BY u.name', 'sql')
ORDER BY parser_type;
----
duckdb	9	9
tree-sitter	35	35