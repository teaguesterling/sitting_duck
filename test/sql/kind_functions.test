# Test kind-related helper functions

require sitting_duck

statement ok
LOAD sitting_duck;

# Test kind_code function
query I
SELECT kind_code('DEFINITION');
----
240

query I
SELECT kind_code('LITERAL');
----
64

query I
SELECT kind_code('FLOW_CONTROL');
----
144

query I
SELECT kind_code('INVALID_KIND');
----
NULL

# Test is_kind function
query I
SELECT is_kind(240::UTINYINT, 'DEFINITION');  -- DEFINITION_FUNCTION
----
true

query I
SELECT is_kind(244::UTINYINT, 'DEFINITION');  -- DEFINITION_VARIABLE
----
true

query I
SELECT is_kind(208::UTINYINT, 'DEFINITION');   -- COMPUTATION_CALL
----
false

query I
SELECT is_kind(208::UTINYINT, 'COMPUTATION_NODE');  -- COMPUTATION_CALL is in COMPUTATION_NODE
----
true

# Test with actual AST data
statement ok
CREATE TEMP TABLE test_ast AS 
SELECT * FROM parse_ast('
def foo():
    x = 1
    if x > 0:
        print(x)
', 'python');

# Count nodes by kind
query II
SELECT 
    get_kind(semantic_type) as kind,
    COUNT(*) as count
FROM test_ast
WHERE get_kind(semantic_type) != 'PARSER_SPECIFIC'
GROUP BY kind
ORDER BY count DESC, kind;
----
NAME	5
DEFINITION	4
ORGANIZATION	4
OPERATOR	3
EXECUTION	2
FLOW_CONTROL	2
LITERAL	2
COMPUTATION_NODE	1

# Test filtering by kind
query I
SELECT COUNT(*)
FROM test_ast
WHERE is_kind(semantic_type, 'DEFINITION');
----
4

query I
SELECT COUNT(*)
FROM test_ast
WHERE is_kind(semantic_type, 'NAME');
----
5

query I
SELECT COUNT(*)
FROM test_ast
WHERE is_kind(semantic_type, 'OPERATOR');
----
3
