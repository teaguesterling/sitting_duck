# name: test/sql/duckdb_troubleshooting.test
# description: Test DuckDB parser for live query troubleshooting scenarios
# group: [sitting_duck]

require sitting_duck

statement ok
LOAD sitting_duck;

# Test 1: Query complexity analysis
# =================================

query IIII
SELECT 
    'Simple Query' as query_type,
    COUNT(*) as total_nodes,
    MAX(depth) as max_depth,
    COUNT(CASE WHEN type = 'join' THEN 1 END) as join_count
FROM parse_ast('SELECT name FROM users WHERE active = true', 'duckdb')
UNION ALL
SELECT 
    'Complex Query' as query_type,
    COUNT(*) as total_nodes,
    MAX(depth) as max_depth,
    COUNT(CASE WHEN type = 'join' THEN 1 END) as join_count
FROM parse_ast('
WITH monthly_sales AS (
    SELECT 
        DATE_TRUNC(''month'', order_date) as month,
        SUM(total_amount) as sales
    FROM orders o
    JOIN customers c ON o.customer_id = c.id
    JOIN order_items oi ON o.id = oi.order_id
    WHERE o.status = ''completed''
    GROUP BY DATE_TRUNC(''month'', order_date)
)
SELECT 
    month,
    sales,
    LAG(sales) OVER (ORDER BY month) as prev_sales,
    (sales - LAG(sales) OVER (ORDER BY month)) / LAG(sales) OVER (ORDER BY month) * 100 as growth_rate
FROM monthly_sales
ORDER BY month
', 'duckdb')
ORDER BY query_type;
----
Complex Query	15	4	0
Simple Query	10	4	0

# Test 2: Performance bottleneck identification
# =============================================

query III
SELECT 
    type,
    COUNT(*) as frequency,
    CASE 
        WHEN type = 'join' THEN 'Potential Cartesian Product Risk'
        WHEN type = 'function_call' THEN 'Function Call Operation'
        WHEN type = 'subquery' THEN 'Subquery Optimization Opportunity'
        WHEN type = 'where_clause' THEN 'Filtering Logic'
        ELSE 'Normal Operation'
    END as performance_note
FROM parse_ast('
SELECT DISTINCT
    c.customer_name,
    (SELECT COUNT(*) FROM orders o2 WHERE o2.customer_id = c.id) as order_count,
    (SELECT SUM(total) FROM orders o3 WHERE o3.customer_id = c.id) as total_spent
FROM customers c
JOIN orders o ON c.id = o.customer_id
JOIN order_items oi ON o.id = oi.order_id
WHERE c.registration_date > ''2023-01-01''
  AND EXISTS (SELECT 1 FROM products p WHERE p.id = oi.product_id AND p.active = true)
', 'duckdb')
WHERE type IN ('join', 'subquery', 'where_clause', 'function_call')
GROUP BY type
ORDER BY frequency DESC;
----
join	2	Potential Cartesian Product Risk
where_clause	1	Filtering Logic

# Test 3: AST structure analysis for complex expressions
# ======================================================

query II
SELECT 
    type,
    CASE 
        WHEN type = 'literal' THEN 'LITERAL VALUE'
        WHEN type = 'comparison' THEN 'COMPARISON OP'
        WHEN type = 'conjunction' THEN 'BOOLEAN OP'
        ELSE 'OTHER'
    END as node_category
FROM parse_ast('
SELECT * FROM users 
WHERE username = ''admin'' OR ''1''=''1'' 
   AND password = ''password123''
', 'duckdb')
WHERE type IN ('literal', 'comparison', 'conjunction')
ORDER BY node_category ASC, type ASC;
----
conjunction	BOOLEAN OP
conjunction	BOOLEAN OP
comparison	COMPARISON OP
comparison	COMPARISON OP
comparison	COMPARISON OP
literal	LITERAL VALUE
literal	LITERAL VALUE
literal	LITERAL VALUE
literal	LITERAL VALUE

# Test 4: Index usage optimization hints
# =====================================

query III
SELECT 
    type,
    name,
    CASE 
        WHEN type = 'column_reference' AND name IN ('id', 'user_id', 'customer_id') THEN 'PRIMARY/FOREIGN KEY - Should be indexed'
        WHEN type = 'column_reference' AND name LIKE '%_date' THEN 'DATE COLUMN - Consider index for time-based queries'
        WHEN type = 'column_reference' AND name LIKE '%email%' THEN 'UNIQUE FIELD - Should have unique index'
        WHEN type = 'function_call' AND name = 'count' THEN 'AGGREGATION - Consider covering index'
        ELSE 'STANDARD COLUMN ACCESS'
    END as index_recommendation
FROM parse_ast('
SELECT 
    u.id,
    u.email,
    u.registration_date,
    COUNT(o.id) as order_count
FROM users u
LEFT JOIN orders o ON u.id = o.customer_id
WHERE u.registration_date >= ''2024-01-01''
  AND u.email IS NOT NULL
GROUP BY u.id, u.email, u.registration_date
', 'duckdb')
WHERE type IN ('column_reference', 'function_call') AND name IS NOT NULL
ORDER BY index_recommendation;
----
function_call	count	AGGREGATION - Consider covering index
column_reference	registration_date	DATE COLUMN - Consider index for time-based queries
column_reference	registration_date	DATE COLUMN - Consider index for time-based queries
column_reference	registration_date	DATE COLUMN - Consider index for time-based queries
column_reference	id	PRIMARY/FOREIGN KEY - Should be indexed
column_reference	id	PRIMARY/FOREIGN KEY - Should be indexed
column_reference	id	PRIMARY/FOREIGN KEY - Should be indexed
column_reference	email	UNIQUE FIELD - Should have unique index
column_reference	email	UNIQUE FIELD - Should have unique index

# Test 5: Query complexity analysis
# ==================================

query II
SELECT 
    type,
    COUNT(*) as count
FROM parse_ast('
    SELECT *
    FROM orders o
    JOIN customers c ON o.customer_id = c.id
    JOIN (
        SELECT customer_id, COUNT(*) as order_count
        FROM orders
        GROUP BY customer_id
    ) oc ON c.id = oc.customer_id
    WHERE o.total > (
        SELECT AVG(total) 
        FROM orders 
        WHERE customer_id = o.customer_id
    )
    ', 'duckdb')
WHERE type IN ('join', 'select_statement', 'function_call')
GROUP BY type
ORDER BY count DESC;
----
join	2
select_statement	1

# Test 6: Data type and schema inference
# ======================================

query III
SELECT 
    type,
    name,
    CASE 
        WHEN name LIKE '%_id' OR name = 'id' THEN 'INTEGER/BIGINT'
        WHEN name LIKE '%_date' OR name LIKE '%_time%' THEN 'TIMESTAMP/DATE'
        WHEN name LIKE '%email%' THEN 'VARCHAR(255) UNIQUE'
        WHEN name LIKE '%name%' OR name LIKE '%title%' THEN 'VARCHAR(100)'
        WHEN name LIKE '%amount%' OR name LIKE '%price%' OR name LIKE '%total%' THEN 'DECIMAL(10,2)'
        WHEN name LIKE '%count%' THEN 'INTEGER'
        WHEN name LIKE '%active%' OR name LIKE '%enabled%' THEN 'BOOLEAN'
        ELSE 'VARCHAR(50)'
    END as suggested_type
FROM parse_ast('
CREATE TABLE orders (
    order_id,
    customer_id, 
    order_date,
    total_amount,
    item_count,
    is_active
)
', 'duckdb')
WHERE type = 'identifier' AND name IS NOT NULL
ORDER BY name;
----

# Test 7: Resource usage estimation
# =================================

query III
SELECT 
    'Query Complexity Score' as metric,
    (COUNT(*) * 1.0 + 
     COUNT(CASE WHEN type = 'join' THEN 1 END) * 5.0 +
     COUNT(CASE WHEN type = 'subquery' THEN 1 END) * 3.0 +
     COUNT(CASE WHEN type = 'function_call' THEN 1 END) * 1.5 +
     MAX(depth) * 2.0) as score,
    CASE 
        WHEN (COUNT(*) * 1.0 + 
              COUNT(CASE WHEN type = 'join' THEN 1 END) * 5.0 +
              COUNT(CASE WHEN type = 'subquery' THEN 1 END) * 3.0 +
              COUNT(CASE WHEN type = 'function_call' THEN 1 END) * 1.5 +
              MAX(depth) * 2.0) < 20 THEN 'LOW RESOURCE'
        WHEN (COUNT(*) * 1.0 + 
              COUNT(CASE WHEN type = 'join' THEN 1 END) * 5.0 +
              COUNT(CASE WHEN type = 'subquery' THEN 1 END) * 3.0 +
              COUNT(CASE WHEN type = 'function_call' THEN 1 END) * 1.5 +
              MAX(depth) * 2.0) < 50 THEN 'MEDIUM RESOURCE'
        ELSE 'HIGH RESOURCE'
    END as resource_category
FROM parse_ast('
WITH RECURSIVE org_chart AS (
    SELECT emp_id, name, manager_id, 1 as level
    FROM employees 
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.emp_id, e.name, e.manager_id, oc.level + 1
    FROM employees e
    JOIN org_chart oc ON e.manager_id = oc.emp_id
    WHERE oc.level < 10
)
SELECT 
    level,
    COUNT(*) as employee_count,
    AVG(salary) as avg_salary,
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY salary) as median_salary
FROM org_chart oc
JOIN employee_details ed ON oc.emp_id = ed.emp_id
GROUP BY level
ORDER BY level
', 'duckdb');
----
Query Complexity Score	32.5	MEDIUM RESOURCE