// Go language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Package and imports
DEF_TYPE("package_clause", DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("package_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0x01)
DEF_TYPE("import_declaration", EXTERNAL_IMPORT, NONE, NONE, 0x01)
DEF_TYPE("import_spec", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)

// Function declarations and definitions with refinements
DEF_TYPE("function_declaration", DEFINITION_FUNCTION | SemanticRefinements::Function::REGULAR, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("method_declaration", DEFINITION_FUNCTION | SemanticRefinements::Function::REGULAR, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("func_literal", DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA, NONE, ARROW_FUNCTION, 0)

// Type declarations
DEF_TYPE("type_declaration", EXECUTION_DECLARATION, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("type_spec", EXECUTION_DECLARATION, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("struct_type", DEFINITION_CLASS, NONE, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("interface_type", DEFINITION_CLASS, NONE, CLASS_WITH_METHODS, 0x01)

// Variable declarations with refinements
DEF_TYPE("var_declaration", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("var_spec", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("const_declaration", DEFINITION_VARIABLE | SemanticRefinements::Variable::IMMUTABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("const_spec", DEFINITION_VARIABLE | SemanticRefinements::Variable::IMMUTABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("short_var_declaration", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)

// Expressions and references with refinements
DEF_TYPE("call_expression", COMPUTATION_CALL | SemanticRefinements::Call::FUNCTION, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("selector_expression", COMPUTATION_ACCESS, FIND_PROPERTY, NONE, 0)
DEF_TYPE("index_expression", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("slice_expression", COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and literals
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("field_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)

// Literals with refinements - name and value both contain the literal text
DEF_TYPE("int_literal", LITERAL_NUMBER | SemanticRefinements::Number::INTEGER, NODE_TEXT, NONE, 0)
DEF_TYPE("float_literal", LITERAL_NUMBER | SemanticRefinements::Number::FLOAT, NODE_TEXT, NONE, 0)
DEF_TYPE("imaginary_literal", LITERAL_NUMBER | SemanticRefinements::Number::COMPLEX, NODE_TEXT, NONE, 0)
DEF_TYPE("rune_literal", LITERAL_STRING | SemanticRefinements::String::LITERAL, NODE_TEXT, NONE, 0)
DEF_TYPE("raw_string_literal", LITERAL_STRING | SemanticRefinements::String::RAW, NODE_TEXT, NONE, 0)
DEF_TYPE("interpreted_string_literal", LITERAL_STRING | SemanticRefinements::String::LITERAL, NODE_TEXT, NONE, 0)

// Control flow with refinements
DEF_TYPE("if_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::BINARY, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP | SemanticRefinements::Loop::CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("range_clause", FLOW_LOOP | SemanticRefinements::Loop::ITERATOR, NONE, NONE, 0)
DEF_TYPE("switch_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::MULTIWAY, NONE, NONE, 0)
DEF_TYPE("type_switch_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::MULTIWAY, NONE, NONE, 0)
DEF_TYPE("select_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::MULTIWAY, NONE, NONE, 0)

// Go-specific constructs
DEF_TYPE("go_statement", FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE("defer_statement", FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE("channel_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("receive_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("send_statement", EXECUTION_STATEMENT, NONE, NONE, 0)

// Punctuation and delimiters
DEF_TYPE("(", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(",", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("\"", PARSER_PUNCTUATION, NONE, NONE, 0)

// Operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(":=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("+", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("&&", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NONE, NONE, 0)

// Go Keywords - proper semantic classifications instead of PARSER_CONSTRUCT
DEF_TYPE("if", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("func", DEFINITION_FUNCTION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("var", DEFINITION_VARIABLE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("const", DEFINITION_VARIABLE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("type", TYPE_REFERENCE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("package", DEFINITION_MODULE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("import", EXTERNAL_IMPORT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("go", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("defer", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("chan", TYPE_COMPOSITE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("select", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("case", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("default", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("switch", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("range", PATTERN_COLLECT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)

// Additional operators and symbols
DEF_TYPE("&", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NONE, 0)

// Literals and constants
DEF_TYPE("nil", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// Type constructs
DEF_TYPE("pointer_type", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("qualified_type", TYPE_REFERENCE, NONE, NONE, 0)

// Complex constructs and statements
DEF_TYPE("expression_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("argument_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("parameter_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("parameter_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("field_declaration_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("binary_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("unary_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("parenthesized_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("block", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("expression_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("assignment_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("inc_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("literal_element", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("literal_value", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("composite_literal", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("interpreted_string_literal_content", LITERAL_STRING, NONE, NONE, 0)

// Control flow constructs
DEF_TYPE("expression_case", FLOW_CONDITIONAL, NONE, NONE, 0)

// Comments (mark as syntax to filter out by default)
DEF_TYPE("comment", METADATA_COMMENT, NONE, NONE, 0x08)
DEF_TYPE("line_comment", METADATA_COMMENT, NONE, NONE, 0x08)
DEF_TYPE("block_comment", METADATA_COMMENT, NONE, NONE, 0x08)

// Go perfection - remaining 2,505 unclassified nodes
DEF_TYPE("source_file", DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE("for_clause", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("field_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("slice_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("dec_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("escape_sequence", LITERAL_STRING, NONE, NONE, 0)
DEF_TYPE("type_conversion_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("label_name", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("import_spec_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("interface", TYPE_COMPOSITE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("struct", TYPE_COMPOSITE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("parenthesized_type", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("goto_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("goto", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("default_case", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("function_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("type_assertion_expression", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("labeled_statement", EXECUTION_STATEMENT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("array_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("var_spec_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("defer", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("chan", TYPE_COMPOSITE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("method_elem", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("&^=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("type_elem", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("variadic_parameter_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("type_instantiation_expression", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("type_arguments", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("iota", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("go", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("map_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("map", TYPE_COMPOSITE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("dot", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("...", PATTERN_COLLECT, NONE, NONE, 0)
DEF_TYPE("generic_type", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("expression_switch_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("&^", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)

// ==============================================================================
// Parser-level semantic mappings only
// Note: Go built-in function names (make, len, append, etc.) and library functions
// (Map, Filter, Reduce, etc.) are removed since they're just identifiers - could be 
// user-defined functions with different semantics
// ==============================================================================

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)