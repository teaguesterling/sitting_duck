# name: test/sql/hierarchical_struct_schema.test
# description: Test flat schema field access (legacy hierarchical tests converted)
# group: [sitting_duck]

require sitting_duck

statement ok
LOAD sitting_duck;

# Test 1: Verify hierarchical function structure and field access
# ===============================================================

query I
SELECT COUNT(*) FROM read_ast_hierarchical('test/data/sql/example.sql', 'sql') LIMIT 1;
----
177

# Test 2: Test STRUCT schema columns are available
# =================================================

query I
SELECT 
    column_name
FROM (
    DESCRIBE SELECT * FROM read_ast_hierarchical('test/data/sql/example.sql', 'sql') LIMIT 0
)
ORDER BY column_name;
----
context
node_id
peek
source
structure
type

# Test 3: Test basic flat schema field access - source fields
# ============================================================

query II
SELECT 
    type as node_type,
    source.language as language
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE type = 'module'
LIMIT 1;
----
module	python

# Test 4: Test flat schema field access - source location fields  
# =================================================================

query IIII
SELECT 
    type as node_type,
    start_line as start_line,
    start_column as start_col,
    end_line as end_line
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE type = 'function_definition'
LIMIT 1;
----
function_definition	1	1	3

# Test 5: Test flat schema field access - structure fields
# ==========================================================

query IIII
SELECT 
    type as node_type,
    parent_id as parent_id,
    depth as depth,
    children_count as children_count
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE type = 'function_definition'
LIMIT 1;
----
function_definition	0	1	5

# Test 6: Test flat schema field access - context fields
# ========================================================

query III
SELECT 
    type as node_type,
    name as name,
    semantic_type as semantic_type
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE name IS NOT NULL
ORDER BY node_id
LIMIT 3;
----
function_definition	hello	240
identifier	hello	80
string	"""Say hello"""	68

# Test 7: Test flat schema consistency
# =====================================

query I
SELECT 
    (hier_count.total = flat_count.total) as consistent_counts
FROM (
    SELECT COUNT(*) as total
    FROM read_ast_hierarchical('test/data/python/simple.py', 'python')
) hier_count,
(
    SELECT COUNT(*) as total
    FROM read_ast_flat('test/data/python/simple.py', 'python')
) flat_count;
----
true

# Test 8: Test complex flat field queries with JOINs
# ====================================================

query II
SELECT 
    parent.type as parent_type,
    COUNT(*) as child_count
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') child
JOIN read_ast_hierarchical('test/data/python/simple.py', 'python') parent
    ON child.parent_id = parent.node_id
WHERE parent.type IN ('function_definition', 'module')
GROUP BY parent.type
ORDER BY parent.type;
----
function_definition	20
module	4

# Test 9: Test flat schema semantic type filtering
# =================================================

query II
SELECT 
    type as node_type,
    semantic_type as semantic_type
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE semantic_type IN (64, 240)  -- integers and functions
ORDER BY type, semantic_type
LIMIT 2;
----
def	240
def	240

# Test 10: Test flat field access in WHERE clauses
# ==================================================

query I
SELECT COUNT(*)
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE start_line = 1 
  AND depth > 0 
  AND name IS NOT NULL;
----
2

# Test 11: Test flat field access with aggregations
# ===================================================

query II
SELECT 
    language as language,
    MAX(depth) as max_depth
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
GROUP BY language;
----
python	8

# Test 12: Test flat schema parsing with multiple languages
# ===========================================================

query III
SELECT 
    language as language,
    type as node_type,
    COUNT(*) as count
FROM read_ast_hierarchical(['test/data/python/simple.py', 'test/data/javascript/simple.js'], 'auto')
WHERE type IN ('module', 'program')
GROUP BY language, type
ORDER BY language, type;
----
javascript	program	1
python	module	1

# Test 13: Test flat schema NULL handling
# =========================================

query II
SELECT 
    type as node_type,
    (name IS NULL) as name_is_null
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE type = 'module'
LIMIT 1;
----
module	true

# Test 14: Test complex flat schema query with flat fields
# ==========================================================

query III
SELECT 
    type as node_type,
    name as name,
    descendant_count as descendant_count
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE descendant_count > 3
ORDER BY descendant_count DESC
LIMIT 2;
----
module	NULL	109
class_definition	MyClass	45

# Test 15: Test flat schema error handling with flat field access
# =================================================================

statement ok
SELECT 
    file_path,
    semantic_type
FROM read_ast_hierarchical('test/data/python/syntax_error.py', 'python', ignore_errors := true) 
WHERE type = 'ERROR'
LIMIT 1;

# Test 16: Test peek field access in flat schema
# ================================================

query II
SELECT 
    type as node_type,
    (peek IS NOT NULL) as has_peek
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE type = 'function_definition'
LIMIT 1;
----
function_definition	true

# Test 17: Test flat schema DuckDB SQL parsing
# ==============================================

query III
SELECT 
    type as node_type,
    name as name,
    start_line as line
FROM read_ast_hierarchical('test/data/sql/example.sql', 'sql') 
WHERE name IS NOT NULL
ORDER BY start_column
LIMIT 3;
----
keyword_select	SELECT	2
keyword_from	FROM	6
keyword_left	LEFT	7

# Test 18: Test parent_id relationships
# ======================================

query I
SELECT COUNT(*)
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') child
WHERE EXISTS (
    SELECT 1 FROM read_ast_hierarchical('test/data/python/simple.py', 'python') parent 
    WHERE parent.node_id = child.parent_id
);
----
109

# Test 19: Test flat schema flags access
# =======================================

query II
SELECT 
    type as node_type,
    flags as flags
FROM read_ast_hierarchical('test/data/python/simple.py', 'python') 
WHERE flags > 0
ORDER BY node_id
LIMIT 2;
----
def	1
class	1

# Test 20: Test flat schema batch processing consistency 
# =======================================================

query I
SELECT 
    (batch1.total = batch100.total) as consistent_batching
FROM (
    SELECT COUNT(*) as total
    FROM read_ast_hierarchical('test/data/python/simple.py', 'python', batch_size := 1)
) batch1,
(
    SELECT COUNT(*) as total
    FROM read_ast_hierarchical('test/data/python/simple.py', 'python', batch_size := 100)
) batch100;
----
true