// F# language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)
// TODO: Complete after examining tree-sitter parse results

// Program structure
DEF_TYPE("file", DEFINITION_MODULE, NONE, NONE, 0x01)
DEF_TYPE("namespace_declaration", DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("module_declaration", DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0x01)

// Import statements
DEF_TYPE("open_declaration", EXTERNAL_IMPORT, FIND_IDENTIFIER, NONE, 0)

// Function definitions
DEF_TYPE("function_declaration", DEFINITION_FUNCTION, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("method_declaration", DEFINITION_FUNCTION, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)

// Type definitions
DEF_TYPE("type_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("record_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("union_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)

// Variable declarations
DEF_TYPE("value_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)

// Function calls and expressions
DEF_TYPE("application_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("invoke_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)

// Control flow
DEF_TYPE("if_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("match_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("for_expression", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("while_expression", FLOW_LOOP, NONE, NONE, 0)

// Error handling
DEF_TYPE("try_expression", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("with_expression", ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE("finally_expression", ERROR_FINALLY, NONE, NONE, 0)

// Async/computation expressions
DEF_TYPE("ce_expression", FLOW_SYNC, NONE, NONE, 0)

// Lambda expressions
DEF_TYPE("lambda_expression", DEFINITION_FUNCTION, NONE, ARROW_FUNCTION, 0)
DEF_TYPE("anon_record_expression", DEFINITION_FUNCTION, NONE, ARROW_FUNCTION, 0)

// Identifiers and literals
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("long_identifier", NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE("int", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("float", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("char", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("bool", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)