// Java language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Compilation unit and packages
DEF_TYPE("program", DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE("package_declaration", DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("import_declaration", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0)

// Class and interface definitions
DEF_TYPE("class_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("interface_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("enum_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("annotation_type_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("record_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)

// Method and constructor definitions
DEF_TYPE("method_declaration", DEFINITION_FUNCTION, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("constructor_declaration", DEFINITION_FUNCTION, FIND_IDENTIFIER, CONSTRUCTOR_DEFINITION, 0)
DEF_TYPE("static_initializer", DEFINITION_FUNCTION, NONE, NONE, 0)
DEF_TYPE("instance_initializer", DEFINITION_FUNCTION, NONE, NONE, 0)

// Field and variable declarations
DEF_TYPE("field_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("local_variable_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("variable_declarator", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("formal_parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("spread_parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("catch_formal_parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Types
DEF_TYPE("type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("generic_type", TYPE_GENERIC, NODE_TEXT, NONE, 0)
DEF_TYPE("array_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("integral_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("floating_point_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("boolean_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("void_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)

// Expressions and calls
DEF_TYPE("method_invocation", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("object_creation_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("field_access", COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("array_access", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("binary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("unary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("update_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("ternary_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("lambda_expression", DEFINITION_FUNCTION, NONE, NONE, 0)
DEF_TYPE("method_reference", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)

// Identifiers and literals
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("decimal_integer_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("hex_integer_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("octal_integer_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("binary_integer_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("decimal_floating_point_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("hex_floating_point_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("null_literal", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("character_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)

// Control flow
DEF_TYPE("if_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("enhanced_for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("do_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("switch_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("switch_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("yield_statement", FLOW_JUMP, NONE, NONE, 0)

// Exception handling
DEF_TYPE("try_statement", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("try_with_resources_statement", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("catch_clause", ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE("finally_clause", ERROR_FINALLY, NONE, NONE, 0)
DEF_TYPE("throw_statement", ERROR_THROW, NONE, NONE, 0)

// Annotations
DEF_TYPE("annotation", METADATA_ANNOTATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("marker_annotation", METADATA_ANNOTATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("annotation_argument_list", ORGANIZATION_LIST, NONE, NONE, 0)

// Comments
DEF_TYPE("line_comment", METADATA_COMMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("block_comment", METADATA_COMMENT, NODE_TEXT, NONE, 0)

// Modifiers
DEF_TYPE("modifiers", METADATA_ANNOTATION, NONE, NONE, 0)
DEF_TYPE("modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Keywords - now classified by semantic function with IS_KEYWORD flag
DEF_TYPE("public", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_PUBLIC)
DEF_TYPE("private", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("protected", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("static", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("final", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("abstract", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("new", COMPUTATION_CALL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("this", NAME_SCOPED, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("super", NAME_SCOPED, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("interface", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("enum", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("extends", TYPE_REFERENCE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("implements", TYPE_REFERENCE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Additional Java constructs for 100% classification - 74 remaining nodes
DEF_TYPE("constructor_body", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("type_arguments", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("int", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class_body", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("return", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("import", EXTERNAL_IMPORT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("enum_body", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("scoped_type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("throws", ERROR_THROW, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("throw", ERROR_THROW, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("package", DEFINITION_MODULE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("dimensions", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("catch", ERROR_CATCH, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("@", NAME_ATTRIBUTE, NODE_TEXT, NONE, 0)
DEF_TYPE("try", ERROR_TRY, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("if", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("catch_type", ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE("for", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("->", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("parenthesized_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("interface_body", ORGANIZATION_BLOCK, NONE, NONE, 0)

// Structural elements
DEF_TYPE("argument_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("formal_parameters", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("block", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("expression_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("scoped_identifier", NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE("string_fragment", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("enum_constant", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Punctuation
DEF_TYPE(",", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Delimiters
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("\"", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("'", PARSER_DELIMITER, NODE_TEXT, NONE, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE(">>>=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("instanceof", OPERATOR_COMPARISON, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE(">>>", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

// Logical operators
DEF_TYPE("&&", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)

// Other operators
DEF_TYPE("?", FLOW_CONDITIONAL, NODE_TEXT, NONE, 0)
DEF_TYPE("::", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)