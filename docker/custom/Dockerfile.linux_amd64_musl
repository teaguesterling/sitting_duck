FROM alpine:3

# Setup the basic necessities for Alpine
RUN apk add --no-cache \
    curl zip unzip tar autoconf automake libtool \
    ninja cmake make \
    ccache \
    openjdk11-jdk maven \
    wget \
    linux-headers \
    jq \
    git \
    bash \
    build-base \
    python3 \
    py3-pip \
    gcompat \
    nodejs \
    npm

# Install the AWS cli (use pip version for Alpine/musl compatibility)
RUN pip3 --version
RUN pip3 install --break-system-packages awscli || pip3 install --user awscli
RUN aws --version

# Node.js and npm are already installed via apk above
RUN node --version && npm --version

# Install Rust and Cargo for building tree-sitter CLI from source
RUN apk add --no-cache rust cargo

# Build tree-sitter CLI from source (compatible with musl)
ENV PATH="/root/.cargo/bin:${PATH}"
RUN cargo install tree-sitter-cli --locked
RUN tree-sitter --version

# Setup VCPKG in a mounted volume TODO: figure out how to cache this
ARG vcpkg_url
ARG vcpkg_commit
RUN mkdir /vcpkg && \
    cmake --version && \
    cd /vcpkg && \
    git init && \
    git remote add origin $vcpkg_url && \
    git fetch origin $vcpkg_commit && \
    git checkout $vcpkg_commit && \
    ./bootstrap-vcpkg.sh
ENV VCPKG_ROOT=/vcpkg
ENV VCPKG_TOOLCHAIN_PATH=/vcpkg/scripts/buildsystems/vcpkg.cmake
ENV PATH="${VCPKG_ROOT}:${PATH}"

# Common environment variables
ENV GEN=ninja

# Specify where we expect the extension to be mounted and use that as working dir
VOLUME /duckdb_build_dir
WORKDIR /duckdb_build_dir

# Allow git access to the mounted volume
RUN git config --global --add safe.directory "*"

# Mount for ccache to allow restoring ccache in GH actions
VOLUME /ccache_dir
ENV CCACHE_DIR=/ccache_dir
ENV CCACHE_COMPRESS=TRUE
ENV CCACHE_COMPRESSLEVEL=6
ENV CCACHE_MAXSIZE=400M

###
# Conditionally configure some extra dependencies
###
# a `;` separated list of extra toolchains to install (passed in like this to makes things easier through GitHub Actions)
# Note that it should start and end with a `;` e.g. `;rust;parser_tools;`
ARG extra_toolchains

# Install Parser tools
RUN case "$extra_toolchains" in \
  *\;parser_tools\;*) \
   apk add --no-cache bison flex \
  ;; \
esac

# Install Fortran
RUN case "$extra_toolchains" in \
  *\;fortran\;*) \
    apk add --no-cache gfortran \
  ;; \
esac

# Configure Rust
ENV PATH="/root/.cargo/bin:${PATH}"
RUN case "$extra_toolchains" in \
  *\;rust\;*) \
    curl https://sh.rustup.rs -sSf | bash -s -- -y; \
  ;; \
esac

# Configure go
ENV PATH="/usr/local/go/bin:${PATH}"
RUN case "$extra_toolchains" in \
  *\;go\;*) \
    wget https://go.dev/dl/go1.20.5.linux-amd64.tar.gz && \
    tar -xzvf go1.20.5.linux-amd64.tar.gz && \
    mv go /usr/local &&\
    go version \
  ;; \
esac