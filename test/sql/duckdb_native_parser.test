# name: test/sql/duckdb_native_parser.test
# description: Test DuckDB native parser capabilities vs tree-sitter
# group: [sitting_duck]

require sitting_duck

statement ok
LOAD sitting_duck;

# Test 1: Verify DuckDB language is available
# ===========================================

query I
SELECT language FROM ast_supported_languages() WHERE language = 'duckdb';
----
duckdb

# Test 2: Basic SELECT parsing accuracy
# =====================================

query IIIII
SELECT type, name, semantic_type, depth, descendant_count
FROM parse_ast('SELECT user_id, COUNT(*) as total FROM orders GROUP BY user_id', 'duckdb') 
ORDER BY node_id
LIMIT 8;
----
program	(empty)	252	0	8
select_statement	(empty)	224	1	7
select_node	(empty)	224	2	6
select_list	(empty)	188	3	2
column_reference	user_id	80	4	0
function_call	count_star	208	4	0
table_reference	orders	84	3	0
group_by_clause	(empty)	236	3	1

# Test 3: CTE (WITH clause) parsing
# =================================

query II
SELECT type, name
FROM parse_ast('
WITH regional_sales AS (
    SELECT region, SUM(sales) as total_sales
    FROM sales_data 
    GROUP BY region
),
top_regions AS (
    SELECT region FROM regional_sales WHERE total_sales > 1000
)
SELECT * FROM top_regions
', 'duckdb')
WHERE type IN ('select_statement', 'select_node')
ORDER BY type, name;
----
select_statement	(empty)

# Test 4: Complex JOIN parsing
# ============================

query III
SELECT type, semantic_type, COUNT(*) as count
FROM parse_ast('
SELECT u.name, p.title, c.content
FROM users u
LEFT JOIN posts p ON u.id = p.user_id
INNER JOIN comments c ON p.id = c.post_id
WHERE u.active = true
', 'duckdb')
GROUP BY type, semantic_type
HAVING COUNT(*) > 1
ORDER BY count DESC, type;
----
column_reference	80	4
table_reference	84	3
join	228	2

# Test 5: Window functions and advanced SQL
# =========================================

query II
SELECT type, COUNT(*) as count
FROM parse_ast('
SELECT 
    name,
    salary,
    ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) as rank,
    LAG(salary) OVER (ORDER BY hire_date) as prev_salary
FROM employees
', 'duckdb')
WHERE type IN ('expression', 'column_reference', 'window_function')
GROUP BY type
ORDER BY type;
----
column_reference	2
window_function	2

# Test 6: Semantic type accuracy for SQL constructs
# =================================================

query II
SELECT semantic_type_to_string(semantic_type) as semantic_type, COUNT(*) as count
FROM parse_ast('
INSERT INTO users (name, email) 
VALUES (''John'', ''john@example.com'')
ON CONFLICT (email) DO UPDATE SET name = EXCLUDED.name
', 'duckdb')
GROUP BY semantic_type
ORDER BY semantic_type;
----
DEFINITION_MODULE	1
EXECUTION_MUTATION	1

# Test 7: Error handling with malformed SQL
# =========================================

query I
SELECT COUNT(*) FROM parse_ast('SELECT FROM WHERE', 'duckdb') WHERE type = 'parse_error';
----
1

# Test 8: DuckDB-specific functions and syntax
# ============================================

query II
SELECT type, name
FROM parse_ast('
SELECT 
    unnest([1,2,3]) as value,
    current_timestamp::date as today,
    ''hello world''::json->>''$.message'' as msg
FROM generate_series(1, 10)
', 'duckdb')
WHERE type = 'function_call'
ORDER BY name;
----
function_call	->>
function_call	unnest

# Test 9: Comparison with tree-sitter SQL parser
# ==============================================

query IIII
SELECT 
    'duckdb' as parser,
    COUNT(*) as total_nodes,
    COUNT(CASE WHEN semantic_type IN (208, 224, 228, 236) THEN 1 END) as sql_specific_nodes,
    COUNT(CASE WHEN name IS NOT NULL THEN 1 END) as named_nodes
FROM parse_ast('SELECT a.id, b.name FROM table_a a JOIN table_b b ON a.id = b.a_id', 'duckdb')
UNION ALL
SELECT 
    'tree-sitter' as parser,
    COUNT(*) as total_nodes,
    COUNT(CASE WHEN semantic_type IN (208, 224, 228, 236) THEN 1 END) as sql_specific_nodes,
    COUNT(CASE WHEN name IS NOT NULL THEN 1 END) as named_nodes
FROM parse_ast('SELECT a.id, b.name FROM table_a a JOIN table_b b ON a.id = b.a_id', 'sql')
ORDER BY parser;
----
duckdb	9	3	9
tree-sitter	43	7	43

# Test 10: Live query debugging capability
# ========================================

query I
SELECT COUNT(*) FROM parse_ast('SELECT COUNT(*) FROM users', 'duckdb');
----
6

# Test 11: Validate semantic type consistency
# ===========================================

query II
SELECT 
    get_super_kind(semantic_type) as super_kind,
    COUNT(*) as count
FROM parse_ast('
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
', 'duckdb')
GROUP BY super_kind
ORDER BY super_kind;
----
COMPUTATION	1
CONTROL_EFFECTS	1