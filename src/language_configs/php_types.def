// PHP language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Program and includes
DEF_TYPE("program", DEFINITION_MODULE, NONE, NONE, 0x01)
DEF_TYPE("php_tag", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("require_expression", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE("require_once_expression", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE("include_expression", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE("include_once_expression", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE("namespace_definition", DEFINITION_MODULE, CUSTOM, NONE, 0x01)
DEF_TYPE("namespace_use_declaration", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)

// Class and interface definitions
DEF_TYPE("class_declaration", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("interface_declaration", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("trait_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("enum_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)

// Function and method definitions
DEF_TYPE("function_definition", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("function", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("method_declaration", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("constructor_declaration", DEFINITION_FUNCTION, NODE_TEXT, NONE, 0x01)
DEF_TYPE("destructor_declaration", DEFINITION_FUNCTION, NODE_TEXT, NONE, 0x01)
DEF_TYPE("anonymous_function_creation_expression", DEFINITION_FUNCTION, NONE, NONE, 0)
DEF_TYPE("arrow_function", DEFINITION_FUNCTION, NONE, NONE, 0)

// Variable and property declarations
DEF_TYPE("property_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("const_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("global_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("static_variable_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("formal_parameters", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("simple_parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("variadic_parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("property_promotion_parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Types
DEF_TYPE("named_type", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("optional_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("union_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("intersection_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("primitive_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("array_type", TYPE_COMPOSITE, NODE_TEXT, NONE, 0)

// Expressions and calls
DEF_TYPE("function_call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("member_call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("scoped_call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("object_creation_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("member_access_expression", COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("subscript_expression", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("augmented_assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("binary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("unary_op_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("conditional_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("match_expression", FLOW_CONDITIONAL, NONE, NONE, 0)

// Identifiers and literals
DEF_TYPE("name", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("variable_name", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("dynamic_variable_name", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("integer", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("float", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("encapsed_string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("heredoc", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("nowdoc", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("shell_command_expression", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("boolean", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("null", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("array_creation_expression", LITERAL_STRUCTURED, NONE, NONE, 0)

// Control flow
DEF_TYPE("if_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("switch_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("do_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("foreach_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("goto_statement", FLOW_JUMP, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("yield_expression", FLOW_SYNC, NONE, NONE, 0)

// Exception handling
DEF_TYPE("try_statement", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("catch_clause", ERROR_CATCH, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("finally_clause", ERROR_FINALLY, NONE, NONE, 0)
DEF_TYPE("throw_expression", ERROR_THROW, NONE, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)

// Attributes (PHP 8+)
DEF_TYPE("attribute_list", METADATA_ANNOTATION, NONE, NONE, 0)
DEF_TYPE("attribute", METADATA_ANNOTATION, FIND_IDENTIFIER, NONE, 0)

// Special PHP constructs
DEF_TYPE("echo_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("print_intrinsic", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("unset_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("declare_statement", METADATA_DIRECTIVE, NONE, NONE, 0x01)

// Modifiers
DEF_TYPE("visibility_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("static_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("final_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("abstract_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)