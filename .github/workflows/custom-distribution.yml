# Custom Linux builds using our Docker images with Node.js and tree-sitter
name: Custom Linux Distribution
on:
  workflow_call:
    inputs:
      duckdb_version:
        required: true
        type: string
      ci_tools_version:
        required: true
        type: string
      extension_name:
        required: true
        type: string
      extra_toolchains:
        required: false
        type: string
        default: ""

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/duckdb-extension

jobs:
  linux:
    name: Linux (${{ matrix.duckdb_arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - duckdb_arch: linux_amd64
            vcpkg_target_triplet: x64-linux-release
          - duckdb_arch: linux_amd64_musl
            vcpkg_target_triplet: x64-linux-release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Checkout Extension CI tools
        uses: actions/checkout@v4
        with:
          repository: duckdb/extension-ci-tools
          ref: ${{ inputs.ci_tools_version }}
          path: extension-ci-tools

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build extension using custom Docker image
        env:
          DUCKDB_VERSION: ${{ inputs.duckdb_version }}
          EXTENSION_NAME: ${{ inputs.extension_name }}
          VCPKG_TARGET_TRIPLET: ${{ matrix.vcpkg_target_triplet }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -v $(pwd)/extension-ci-tools:/workspace/extension-ci-tools \
            --workdir /workspace \
            -e DUCKDB_VERSION="${DUCKDB_VERSION}" \
            -e EXTENSION_NAME="${EXTENSION_NAME}" \
            -e VCPKG_TARGET_TRIPLET="${VCPKG_TARGET_TRIPLET}" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ matrix.duckdb_arch }} \
            bash -c "
              set -e
              echo 'Node.js version:' && node --version
              echo 'npm version:' && npm --version  
              echo 'tree-sitter version:' && tree-sitter --version
              echo 'Rust version:' && rustc --version
              
              # Checkout specific DuckDB version
              cd duckdb
              git fetch --tags
              git checkout \${DUCKDB_VERSION}
              cd ..
              
              # Setup vcpkg
              echo 'Setting up vcpkg...'
              export VCPKG_TOOLCHAIN_PATH=\$(pwd)/duckdb/scripts/vcpkg_bootstrap.sh
              
              # Configure build
              echo 'Configuring build...'
              make configure
              
              # Build extension
              echo 'Building extension...'
              make release
              
              # Run tests on all architectures (matching macOS behavior)
              echo 'Running tests...'
              make test
              
              # Copy artifacts with standard naming
              mkdir -p /workspace/build/extension_artifacts
              find build/release -name '*.duckdb_extension' -exec cp {} /workspace/build/extension_artifacts/ \;
              
              echo 'Build completed successfully'
            "

      - name: Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.extension_name }}-${{ inputs.duckdb_version }}-extension-${{ matrix.duckdb_arch }}
          path: |
            build/extension_artifacts/*.duckdb_extension
          if-no-files-found: error

      - name: Deploy test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.extension_name }}-${{ inputs.duckdb_version }}-test-results-${{ matrix.duckdb_arch }}
          path: |
            build/debug/test/unittest
            build/release/test/unittest
          if-no-files-found: ignore