// Kotlin language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Function definitions with refinements
DEF_TYPE("function_declaration", DEFINITION_FUNCTION | SemanticRefinements::Function::REGULAR, CUSTOM, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("anonymous_function", DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA, NONE, ARROW_FUNCTION, 0)
DEF_TYPE("annotated_lambda", DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA, NONE, ARROW_FUNCTION, 0)
DEF_TYPE("lambda_literal", DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA, NONE, ARROW_FUNCTION, 0)
DEF_TYPE("primary_constructor", DEFINITION_FUNCTION | SemanticRefinements::Function::CONSTRUCTOR, NONE, NONE, 0)
DEF_TYPE("secondary_constructor", DEFINITION_FUNCTION | SemanticRefinements::Function::CONSTRUCTOR, NONE, NONE, 0)
DEF_TYPE("constructor_invocation", COMPUTATION_CALL | SemanticRefinements::Call::CONSTRUCTOR, FIND_IDENTIFIER, FUNCTION_CALL, 0)

// Class and object definitions
DEF_TYPE("class_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("object_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("interface_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("enum_class_body", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("companion_object", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("anonymous_initializer", DEFINITION_FUNCTION, NONE, NONE, 0)

// Variable declarations with mutability refinements
DEF_TYPE("property_declaration", DEFINITION_VARIABLE | SemanticRefinements::Variable::FIELD, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("variable_declaration", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("multi_variable_declaration", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, NONE, NONE, 0)
DEF_TYPE("parameter", DEFINITION_VARIABLE | SemanticRefinements::Variable::PARAMETER, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("class_parameter", DEFINITION_VARIABLE | SemanticRefinements::Variable::PARAMETER, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("lambda_parameter", DEFINITION_VARIABLE | SemanticRefinements::Variable::PARAMETER, FIND_IDENTIFIER, NONE, 0)

// Function calls and expressions with refinements
DEF_TYPE("call_expression", COMPUTATION_CALL | SemanticRefinements::Call::FUNCTION, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("navigation_expression", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("indexing_expression", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("this_expression", NAME_SCOPED, NODE_TEXT, NONE, 0)
DEF_TYPE("super_expression", NAME_SCOPED, NODE_TEXT, NONE, 0)

// Identifiers and references
DEF_TYPE("simple_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("import_identifier", NAME_QUALIFIED, NODE_TEXT, NONE, 0)
DEF_TYPE("type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)

// Literals with refinements
DEF_TYPE("integer_literal", LITERAL_NUMBER | SemanticRefinements::Number::INTEGER, NODE_TEXT, NONE, 0)
DEF_TYPE("hex_literal", LITERAL_NUMBER | SemanticRefinements::Number::INTEGER, NODE_TEXT, NONE, 0)
DEF_TYPE("bin_literal", LITERAL_NUMBER | SemanticRefinements::Number::INTEGER, NODE_TEXT, NONE, 0)
DEF_TYPE("real_literal", LITERAL_NUMBER | SemanticRefinements::Number::FLOAT, NODE_TEXT, NONE, 0)
DEF_TYPE("boolean_literal", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("character_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("null_literal", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// Structured literals with refinements
DEF_TYPE("collection_literal", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NONE, NONE, 0)
DEF_TYPE("array_literal", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NONE, NONE, 0)
DEF_TYPE("list_literal", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NONE, NONE, 0)

// Control flow
DEF_TYPE("if_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("when_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("when_condition", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("try_expression", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("catch_block", ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE("finally_block", ERROR_FINALLY, NONE, NONE, 0)

// Loop constructs
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("do_while_statement", FLOW_LOOP, NONE, NONE, 0)

// Jump statements
DEF_TYPE("return_expression", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("throw_expression", ERROR_THROW, NONE, NONE, 0)
DEF_TYPE("break_expression", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_expression", FLOW_JUMP, NONE, NONE, 0)

// Async/coroutine constructs
DEF_TYPE("suspend_modifier", FLOW_SYNC, NONE, NONE, 0)

// Module and import
DEF_TYPE("source_file", DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE("package_header", DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("import_header", EXTERNAL_IMPORT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("import_list", EXTERNAL_IMPORT, NONE, NONE, 0)

// Type system
DEF_TYPE("type_alias", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("type_reference", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("user_type", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("nullable_type", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("function_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("parenthesized_type", TYPE_REFERENCE, NONE, NONE, 0)

// Operators with refinements
DEF_TYPE("assignment", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("additive_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("multiplicative_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("comparison_expression", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("equality_expression", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("conjunction_expression", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("disjunction_expression", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("range_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("infix_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("prefix_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("postfix_expression", OPERATOR_ARITHMETIC, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("as_expression", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("is_expression", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("in_expression", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("elvis_expression", OPERATOR_LOGICAL, NONE, NONE, 0)

// Annotations and metadata
DEF_TYPE("annotation", METADATA_ANNOTATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("file_annotation", METADATA_ANNOTATION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("use_site_target", METADATA_ANNOTATION, NONE, NONE, 0)

// Comments
DEF_TYPE("line_comment", METADATA_COMMENT, NONE, NONE, 0)
DEF_TYPE("multiline_comment", METADATA_COMMENT, NONE, NONE, 0)

// Keywords with IS_KEYWORD flag
DEF_TYPE("abstract", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("actual", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("annotation", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("as", OPERATOR_COMPARISON, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("by", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("catch", ERROR_CATCH, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("companion", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("const", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("constructor", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("crossinline", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("data", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("delegate", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("do", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("dynamic", TYPE_REFERENCE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("enum", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("expect", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("external", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("final", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("finally", ERROR_FINALLY, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("fun", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("get", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("if", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("import", EXTERNAL_IMPORT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("in", OPERATOR_COMPARISON, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("infix", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("init", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("inline", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("inner", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("interface", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("internal", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("is", OPERATOR_COMPARISON, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("lateinit", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("noinline", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("null", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("object", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("open", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("operator", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("out", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("override", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("package", DEFINITION_MODULE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("private", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("protected", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("public", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_PUBLIC)
DEF_TYPE("reified", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("sealed", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("set", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("super", NAME_SCOPED, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("suspend", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("tailrec", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("this", NAME_SCOPED, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("throw", ERROR_THROW, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("try", ERROR_TRY, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("typealias", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("val", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("var", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("vararg", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("when", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("where", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Structure and organization
DEF_TYPE("class_body", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("block", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("lambda_literal", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("function_body", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("when_entry", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("parameter_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("value_parameter_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("argument_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("type_parameter_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("type_arguments", ORGANIZATION_LIST, NONE, NONE, 0)

// Punctuation and delimiters
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(",", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("?", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Kotlin-specific operators
DEF_TYPE("!!", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("?:", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)  // Elvis operator
DEF_TYPE("?..", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)  // Safe navigation
DEF_TYPE("::", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)  // Member reference
DEF_TYPE("@", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("$", LITERAL_STRING, NODE_TEXT, NONE, 0)  // String interpolation

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("===", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("!==", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)

// Logical operators
DEF_TYPE("&&", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)

// Range operators
DEF_TYPE("..", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("..<", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

// ==============================================================================
// Parser-level semantic mappings only
// Note: Library-specific function names (map, filter, reduce, etc.) are removed
// since they're just identifiers - could be user-defined functions with different semantics
// ==============================================================================

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)