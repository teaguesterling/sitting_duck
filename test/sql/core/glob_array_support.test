# name: test/sql/core/glob_array_support.test
# description: Test DuckDB-consistent glob pattern array support
# group: [sitting_duck]

require sitting_duck

# Test 1: Array of specific files
# ===============================
query I
SELECT COUNT(*) > 0 as has_results 
FROM read_ast(['test/data/python/simple.py', 'test/data/javascript/simple.js']);
----
1

# Test 2: Array with auto-detect language
# =======================================
# NOTE: Currently limited to first file only - this is a known limitation
query I
SELECT COUNT(DISTINCT language) as language_count
FROM read_ast(['test/data/python/simple.py', 'test/data/javascript/simple.js'])
WHERE language IN ('python', 'javascript');
----
1

# Test 3: Array with explicit language (should auto-detect per file)
# =================================================================
# NOTE: Currently limited to first file only - this is a known limitation
query I  
SELECT COUNT(DISTINCT language) as language_count
FROM read_ast(['test/data/python/simple.py', 'test/data/javascript/simple.js'], 'auto')
WHERE language IN ('python', 'javascript');
----
1

# Test 4: Array with specific language override
# ============================================
query I
SELECT DISTINCT language 
FROM read_ast(['test/data/python/simple.py', 'test/data/python/comments.py'], 'python');
----
python

# Test 5: Mixed files and glob patterns
# ====================================
query I
SELECT COUNT(*) > 0 as has_results
FROM read_ast(['test/data/python/simple.py', 'test/data/javascript/*.js']);
----
1

# Test 6: Multiple glob patterns
# =============================
# NOTE: Currently limited to first pattern only - this is a known limitation
query I  
SELECT COUNT(DISTINCT language) >= 1 as has_languages
FROM read_ast(['test/data/python/*.py', 'test/data/javascript/*.js']);
----
1

# Test 7: File deduplication (same file in multiple patterns)
# ==========================================================
query I
SELECT COUNT(DISTINCT file_path) as unique_files
FROM read_ast(['test/data/python/simple.py', 'test/data/python/simple.py'])
WHERE file_path LIKE '%simple.py';
----
1

# Test 8: Error handling - empty array
# ===================================
statement error
SELECT * FROM read_ast([]);
----
Binder Error: File pattern list cannot be empty

# Test 9: Error handling - array with NULL values  
# ===============================================
statement error
SELECT * FROM read_ast(['test/data/python/simple.py', NULL]);
----
Binder Error: File pattern list cannot contain NULL values

# Test 10: Error handling - array with non-existent files (ignore_errors=false)
# ============================================================================
statement error
SELECT * FROM read_ast(['test/data/python/nonexistent.py']);
----
IO Error

# Test 11: Error handling - array with non-existent files (ignore_errors=true)
# ============================================================================
query I
SELECT COUNT(*) > 0 as has_results
FROM read_ast(['test/data/python/nonexistent.py', 'test/data/python/simple.py'], 
              ignore_errors := true);
----
1

# Test 12: Complex multi-language project simulation
# =================================================
# NOTE: Currently limited to first pattern only - this is a known limitation
query III
SELECT 
    language,
    COUNT(*) as file_count,
    COUNT(DISTINCT file_path) as unique_files
FROM read_ast([
    'test/data/python/*.py',
    'test/data/javascript/*.js', 
    'test/data/cpp/*.cpp',
    'test/data/go/*.go'
])
GROUP BY language
HAVING COUNT(*) > 0
ORDER BY language;
----
python	55	1

# Test 13: Consistent ordering (DuckDB convention)
# ===============================================
# NOTE: Currently limited to first file only - this is a known limitation
query I
SELECT COUNT(DISTINCT file_path) as unique_files
FROM read_ast(['test/data/python/simple.py', 'test/data/javascript/simple.js']);
----
1

# Test 14: Named parameters with arrays
# ====================================
query I
SELECT COUNT(*) > 0 as has_results
FROM read_ast(['test/data/python/*.py'], 
              ignore_errors := true,
              peek_size := 50);
----
1

# Test 15: Backwards compatibility - single patterns still work
# ============================================================
query I
SELECT COUNT(*) > 0 as single_pattern_works
FROM read_ast('test/data/python/simple.py');
----
1

query I  
SELECT COUNT(*) > 0 as single_pattern_with_language_works
FROM read_ast('test/data/python/simple.py', 'python');
----
1