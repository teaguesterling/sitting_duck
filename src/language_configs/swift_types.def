// Swift language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Program structure
DEF_TYPE("source_file", DEFINITION_MODULE, NONE, NONE, 0x01)

// Import statements
DEF_TYPE("import_declaration", EXTERNAL_IMPORT, FIND_IDENTIFIER, NONE, 0)

// Function definitions
DEF_TYPE("function_declaration", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("init_declaration", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("deinit_declaration", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("subscript_declaration", DEFINITION_FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0x01)

// Class and structure definitions
DEF_TYPE("class_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("struct_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("actor_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("enum_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("protocol_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("extension_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)

// Variable and property declarations
DEF_TYPE("property_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("variable_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Type definitions
DEF_TYPE("typealias_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("associatedtype_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)

// Control flow
DEF_TYPE("if_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("guard_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("switch_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("case_item", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("default_case", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("repeat_while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("do_statement", FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE("defer_statement", FLOW_SYNC, NONE, NONE, 0)

// Jump statements
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("fallthrough_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("throw_statement", ERROR_THROW, NONE, NONE, 0)

// Expressions
DEF_TYPE("call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("postfix_expression", COMPUTATION_CALL, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("binary_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("unary_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("ternary_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("assignment_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("compound_assignment_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)

// Member access
DEF_TYPE("navigation_expression", COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("member_access_expression", COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("subscript_expression", COMPUTATION_ACCESS, NONE, NONE, 0)

// Literals
DEF_TYPE("integer_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("real_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("boolean_literal", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("multiline_string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("character_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("nil_literal", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// Collections
DEF_TYPE("array_literal", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("dictionary_literal", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("tuple_expression", LITERAL_STRUCTURED, NONE, NONE, 0)

// Identifiers and types
DEF_TYPE("simple_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("type_identifier", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("user_type", TYPE_COMPOSITE, NODE_TEXT, NONE, 0)
DEF_TYPE("optional_type", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("array_type", TYPE_COMPOSITE, NODE_TEXT, NONE, 0)
DEF_TYPE("dictionary_type", TYPE_COMPOSITE, NODE_TEXT, NONE, 0)
DEF_TYPE("function_type", TYPE_COMPOSITE, NODE_TEXT, NONE, 0)
DEF_TYPE("tuple_type", TYPE_COMPOSITE, NODE_TEXT, NONE, 0)

// Async/await and concurrency
DEF_TYPE("await_expression", FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE("async_keyword", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Error handling
DEF_TYPE("try_expression", ERROR_TRY, FIND_IDENTIFIER, FUNCTION_CALL, 0)
DEF_TYPE("catch_clause", ERROR_CATCH, NONE, NONE, 0)

// Closures and lambdas
DEF_TYPE("lambda_literal", DEFINITION_FUNCTION, NONE, NONE, 0)
DEF_TYPE("closure_expression", DEFINITION_FUNCTION, NONE, ARROW_FUNCTION, 0)

// Attributes and modifiers
DEF_TYPE("attribute", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("availability_condition", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("modifiers", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Access control
DEF_TYPE("visibility_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("mutation_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)
DEF_TYPE("multiline_comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)

// Operators
DEF_TYPE("custom_operator", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("prefix_operator", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("postfix_operator", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("infix_operator", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

// Code organization
DEF_TYPE("statements", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("code_block", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("capture_list", ORGANIZATION_LIST, NONE, NONE, 0)

// Punctuation and delimiters
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("<", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(">", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(",", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("?", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("!", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Swift keywords
DEF_TYPE("associatedtype", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("deinit", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("enum", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("extension", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("fileprivate", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("func", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("import", EXTERNAL_IMPORT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("init", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("inout", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("internal", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("let", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("open", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("operator", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("private", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("protocol", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("public", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("static", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("struct", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("subscript", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("typealias", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("var", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("case", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("default", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("defer", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("do", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("fallthrough", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("guard", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("if", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("in", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("repeat", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("switch", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("where", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("as", OPERATOR_COMPARISON, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("catch", ERROR_CATCH, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("is", OPERATOR_COMPARISON, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("nil", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("rethrows", ERROR_THROW, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("super", NAME_IDENTIFIER, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("self", NAME_IDENTIFIER, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("Self", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("throw", ERROR_THROW, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("throws", ERROR_THROW, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("try", ERROR_TRY, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("await", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("async", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("actor", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Generic and protocols
DEF_TYPE("generic_parameter_clause", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("generic_where_clause", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("conformance_requirement", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("same_type_requirement", TYPE_GENERIC, NONE, NONE, 0)

// Property wrappers and result builders
DEF_TYPE("property_wrapper_type", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("result_builder", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)