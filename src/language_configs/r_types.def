// R language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)
// Use bitwise OR to combine semantic types with refinements: DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA

// Function definitions and declarations
DEF_TYPE("function_definition", DEFINITION_FUNCTION | SemanticRefinements::Function::REGULAR, FIND_ASSIGNMENT_TARGET, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("function", DEFINITION_FUNCTION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)

// Control flow statements
DEF_TYPE("if_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::BINARY, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP | SemanticRefinements::Loop::ITERATOR, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP | SemanticRefinements::Loop::CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("repeat_statement", FLOW_LOOP | SemanticRefinements::Loop::INFINITE, NONE, NONE, 0)

// Jump statements
DEF_TYPE("return", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("next", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)

// Keywords
DEF_TYPE("if", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("repeat", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("in", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)

// Identifiers and names
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("parameter", DEFINITION_VARIABLE | SemanticRefinements::Variable::PARAMETER, FIND_IDENTIFIER, NONE, 0)

// Function calls and expressions
DEF_TYPE("call", COMPUTATION_CALL | SemanticRefinements::Call::FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("binary_operator", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("unary_operator", OPERATOR_ARITHMETIC, NONE, NONE, 0)

// Data access operations
DEF_TYPE("subset", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("subset2", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("extract_operator", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("namespace_operator", COMPUTATION_ACCESS, NONE, NONE, 0)

// Literals - R has many special constants
DEF_TYPE("string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("integer", LITERAL_NUMBER | SemanticRefinements::Number::INTEGER, NODE_TEXT, NONE, 0)
DEF_TYPE("float", LITERAL_NUMBER | SemanticRefinements::Number::FLOAT, NODE_TEXT, NONE, 0)
DEF_TYPE("complex", LITERAL_NUMBER | SemanticRefinements::Number::COMPLEX, NODE_TEXT, NONE, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// R-specific special constants
DEF_TYPE("null", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("na", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("NA", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("NA_integer_", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("NA_real_", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("NA_character_", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("NA_complex_", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("inf", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("nan", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// R structured literals
DEF_TYPE("vector", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("list", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("data_frame", LITERAL_STRUCTURED | SemanticRefinements::Structured::MAPPING, NODE_TEXT, NONE, 0)
DEF_TYPE("matrix", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("array", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NODE_TEXT, NONE, 0)

// Special R constructs
DEF_TYPE("dots", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("dot_dot_i", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("special", COMPUTATION_CALL | SemanticRefinements::Call::FUNCTION, NODE_TEXT, NONE, 0)

// Organizational structures
DEF_TYPE("program", ORGANIZATION_CONTAINER | SemanticRefinements::Organization::HIERARCHICAL, NONE, NONE, 0)
DEF_TYPE("braced_expression", ORGANIZATION_BLOCK | SemanticRefinements::Organization::SEQUENTIAL, NONE, NONE, 0)
DEF_TYPE("parenthesized_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("arguments", ORGANIZATION_LIST | SemanticRefinements::Organization::COLLECTION, NONE, NONE, 0)
DEF_TYPE("parameters", ORGANIZATION_LIST | SemanticRefinements::Organization::COLLECTION, NONE, NONE, 0)
DEF_TYPE("argument", ORGANIZATION_LIST, FIND_IDENTIFIER, NONE, 0)

// String components
DEF_TYPE("string_content", LITERAL_STRING, NONE, NONE, 0)
DEF_TYPE("escape_sequence", LITERAL_STRING, NONE, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NONE, NONE, 0)

// Operators - R has many assignment operators
DEF_TYPE("<-", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("<<-", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("->", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("->>", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(":=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("**", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NONE, NONE, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NONE, 0)

// Logical operators
DEF_TYPE("&", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("&&", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("|", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NONE, NONE, 0)

// R-specific operators
DEF_TYPE("::", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(":::", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("@", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("$", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE(":", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("|>", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("?", METADATA_ANNOTATION, NONE, NONE, 0)

// Delimiters and punctuation  
DEF_TYPE("(", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("[[", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("]]", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("comma", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("'", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("\"", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("\\", PARSER_PUNCTUATION, NONE, NONE, 0)

// R type suffixes
DEF_TYPE("L", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("i", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)