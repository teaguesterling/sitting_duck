// C language node type definitions
// Format: DEF_TYPE("raw_type", semantic_type, name_strategy, value_strategy, flags)

// Translation unit
DEF_TYPE("translation_unit", DEFINITION_MODULE, NONE, NONE, 0x01)

// Preprocessor directives
DEF_TYPE("preproc_include", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE("preproc_def", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("preproc_function_def", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("preproc_call", COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("preproc_if", FLOW_CONDITIONAL, NONE, NONE, 0x01)
DEF_TYPE("preproc_ifdef", FLOW_CONDITIONAL, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("preproc_else", FLOW_CONDITIONAL, NONE, NONE, 0x01)
DEF_TYPE("preproc_elif", FLOW_CONDITIONAL, NONE, NONE, 0x01)
DEF_TYPE("preproc_params", ORGANIZATION_LIST, NONE, NONE, 0)

// Declarations
DEF_TYPE("function_definition", DEFINITION_FUNCTION, FIND_IN_DECLARATOR, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("struct_specifier", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("union_specifier", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("enum_specifier", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("typedef_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("field_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("enumerator", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("parameter_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Type specifiers
DEF_TYPE("primitive_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("sized_type_specifier", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("pointer_declarator", TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("array_declarator", TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("function_declarator", TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)

// Statements
DEF_TYPE("compound_statement", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("labeled_statement", EXECUTION_STATEMENT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("expression_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("if_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("switch_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("case_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("do_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("goto_statement", FLOW_JUMP, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)

// Expressions
DEF_TYPE("call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("field_expression", COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("subscript_expression", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("binary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("unary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("update_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("cast_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("sizeof_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("conditional_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("comma_expression", ORGANIZATION_LIST, NONE, NONE, 0)

// Identifiers and literals
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("number_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("char_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("concatenated_string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("null", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)

// Storage class specifiers
DEF_TYPE("storage_class_specifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("type_qualifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Declarators
DEF_TYPE("init_declarator", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("abstract_declarator", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("parenthesized_declarator", TYPE_COMPOSITE, FIND_IDENTIFIER, NONE, 0)

// Special
DEF_TYPE("variadic_parameter", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("attribute_specifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("ms_declspec_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// ====================================
// PUNCTUATION TOKENS (22.2M misclassified nodes fix)
// ====================================

// Punctuation marks
DEF_TYPE(",", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(".", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Delimiters
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("'", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("\"", PARSER_DELIMITER, NODE_TEXT, NONE, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

// Logical operators
DEF_TYPE("&&", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)

// Member access
DEF_TYPE("->", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)

// Structural elements
DEF_TYPE("initializer_pair", PATTERN_DESTRUCTURE, FIND_PROPERTY, NONE, 0)
DEF_TYPE("argument_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("subscript_designator", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("field_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("initializer_list", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("field_designator", PATTERN_DESTRUCTURE, FIND_PROPERTY, NONE, 0)
DEF_TYPE("parameter_list", ORGANIZATION_LIST, NONE, NONE, 0)

// Keywords - now classified by semantic function with IS_KEYWORD flag
DEF_TYPE("if", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("do", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("switch", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("case", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("default", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("goto", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("const", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("static", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("extern", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_PUBLIC)
DEF_TYPE("register", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("volatile", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("inline", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("typedef", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("struct", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("union", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("enum", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("sizeof", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Preprocessor directives
DEF_TYPE("#include", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#define", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#ifdef", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#ifndef", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#if", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#else", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#elif", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#endif", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#undef", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("#pragma", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("preproc_arg", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)

// String/character content
DEF_TYPE("string_content", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("escape_sequence", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("character", LITERAL_STRING, NODE_TEXT, NONE, 0)

// Missing C constructs
DEF_TYPE("parenthesized_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("pointer_expression", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("type_descriptor", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("statement_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("defined", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("preproc_defined", METADATA_DIRECTIVE, NONE, NONE, 0)
DEF_TYPE("abstract_pointer_declarator", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("\n", PARSER_SYNTAX, NONE, NONE, 0)
DEF_TYPE("NULL", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("unsigned", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("type_definition", DEFINITION_CLASS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("preproc_directive", METADATA_DIRECTIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("macro_type_specifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("else_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("system_lib_string", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0)
DEF_TYPE("field_declaration_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("ms_restrict_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("ms_pointer_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("enumerator_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("?", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("long", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("nullptr", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("auto", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("...", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("abstract_function_declarator", TYPE_COMPOSITE, NONE, NONE, 0)

// Final C edge cases for 100% classification - 771 remaining nodes
DEF_TYPE("compound_literal_expression", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("bitfield_clause", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("linkage_specification", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("declaration_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("offsetof_expression", COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE("offsetof", COMPUTATION_CALL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("abstract_parenthesized_declarator", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("restrict", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("short", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("signed", TYPE_PRIMITIVE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Final C perfection - 404 remaining nodes for 100% classification
DEF_TYPE("constexpr", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("gnu_asm_output_operand", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("gnu_asm_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("gnu_asm_input_operand_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("gnu_asm_output_operand_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("gnu_asm_clobber_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("asm", EXECUTION_STATEMENT, NONE, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("gnu_asm_qualifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("gnu_asm_input_operand", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("__attribute__", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("__asm__", EXECUTION_STATEMENT, NODE_TEXT, NONE, ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("__restrict__", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("abstract_array_declarator", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("__declspec", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("u'", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("L\"", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("::", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("ms_call_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("__forceinline", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("__stdcall", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Absolute C perfection - final 9 nodes
DEF_TYPE("thread_local", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("alignas", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("alignas_qualifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("[[", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("u\"", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("]]", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("attribute_declaration", METADATA_ANNOTATION, NONE, NONE, 0)
DEF_TYPE("attribute", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)