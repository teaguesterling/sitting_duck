// JavaScript node type mappings
// Format: DEF_TYPE(raw_type, semantic_type, name_extraction, value_extraction, flags)
// Use bitwise OR to combine semantic types with refinements: DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA

// Function definitions
DEF_TYPE("function_declaration", DEFINITION_FUNCTION | SemanticRefinements::Function::REGULAR, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("arrow_function", DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA, FIND_ASSIGNMENT_TARGET, ARROW_FUNCTION, 0)
DEF_TYPE("function_expression", DEFINITION_FUNCTION | SemanticRefinements::Function::LAMBDA, FIND_ASSIGNMENT_TARGET, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("method_definition", DEFINITION_FUNCTION | SemanticRefinements::Function::REGULAR, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("async_function_declaration", DEFINITION_FUNCTION | SemanticRefinements::Function::ASYNC, FIND_IDENTIFIER, ASYNC_FUNCTION, 0)

// Class definitions  
DEF_TYPE("class_declaration", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)
DEF_TYPE("class_expression", DEFINITION_CLASS, FIND_IDENTIFIER, CLASS_WITH_METHODS, 0)

// Variable declarations
DEF_TYPE("variable_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("lexical_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)

// Function calls and expressions
DEF_TYPE("call_expression", COMPUTATION_CALL | SemanticRefinements::Call::FUNCTION, CUSTOM, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("new_expression", COMPUTATION_CALL | SemanticRefinements::Call::CONSTRUCTOR, NONE, NONE, 0)
DEF_TYPE("binary_expression", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("unary_expression", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::UNARY, NONE, NONE, 0)
DEF_TYPE("assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("update_expression", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::UNARY, NONE, NONE, 0)

// Member access
DEF_TYPE("member_expression", COMPUTATION_ACCESS, CUSTOM, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("subscript_expression", COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and references
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("property_identifier", NAME_IDENTIFIER, NODE_TEXT, VARIABLE_WITH_TYPE, 0)

// Literals - name and value both contain the literal text
DEF_TYPE("string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("template_string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("number", LITERAL_NUMBER | SemanticRefinements::Number::INTEGER, NODE_TEXT, NONE, 0)
DEF_TYPE("true", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("false", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("null", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("undefined", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("array", LITERAL_STRUCTURED | SemanticRefinements::Structured::SEQUENCE, NONE, NONE, 0)
DEF_TYPE("object", LITERAL_STRUCTURED | SemanticRefinements::Structured::MAPPING, NONE, NONE, 0)

// Control flow
DEF_TYPE("if_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::BINARY, NONE, NONE, 0)
DEF_TYPE("switch_statement", FLOW_CONDITIONAL | SemanticRefinements::Conditional::MULTIWAY, NONE, NONE, 0)
DEF_TYPE("conditional_expression", FLOW_CONDITIONAL | SemanticRefinements::Conditional::TERNARY, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP | SemanticRefinements::Loop::COUNTER, NONE, NONE, 0)
DEF_TYPE("for_in_statement", FLOW_LOOP | SemanticRefinements::Loop::ITERATOR, NONE, NONE, 0)
DEF_TYPE("for_of_statement", FLOW_LOOP | SemanticRefinements::Loop::ITERATOR, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP | SemanticRefinements::Loop::CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("do_statement", FLOW_LOOP | SemanticRefinements::Loop::CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)

// Async/sync constructs
DEF_TYPE("await_expression", FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE("yield_expression", FLOW_SYNC, NONE, NONE, 0)

// Error handling
DEF_TYPE("try_statement", ERROR_TRY, NONE, NONE, 0)
DEF_TYPE("catch_clause", ERROR_CATCH, NONE, NONE, 0)
DEF_TYPE("throw_statement", ERROR_THROW, NONE, NONE, 0)
DEF_TYPE("finally_clause", ERROR_FINALLY, NONE, NONE, 0)

// Structure/Organization
DEF_TYPE("statement_block", ORGANIZATION_BLOCK | SemanticRefinements::Organization::SEQUENTIAL, NONE, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("program", DEFINITION_MODULE, NONE, NONE, 0)
DEF_TYPE("import_statement", EXTERNAL_IMPORT | SemanticRefinements::Import::MODULE, NONE, NONE, 0)
DEF_TYPE("export_statement", EXTERNAL_EXPORT, NONE, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NONE, NONE, 0)

// Keywords (marked with IS_KEYWORD flag)
DEF_TYPE("function", DEFINITION_FUNCTION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class", DEFINITION_CLASS, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("const", DEFINITION_VARIABLE | SemanticRefinements::Variable::IMMUTABLE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("let", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("var", DEFINITION_VARIABLE | SemanticRefinements::Variable::MUTABLE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("if", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("async", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("await", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("import", EXTERNAL_IMPORT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("export", EXTERNAL_EXPORT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)

// Punctuation (marked with IS_PUNCTUATION flag)
DEF_TYPE("(", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(")", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("[", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("]", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("{", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("}", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE(",", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(";", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE(".", PARSER_DELIMITER, NONE, NONE, 0)

// Arithmetic operators
DEF_TYPE("+", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("**", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BINARY, NONE, NONE, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE("~", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE(">>>", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::BITWISE, NONE, NONE, 0)
DEF_TYPE("++", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::UNARY, NONE, NONE, 0)
DEF_TYPE("--", OPERATOR_ARITHMETIC | SemanticRefinements::Arithmetic::UNARY, NONE, NONE, 0)

// Logical operators
DEF_TYPE("&&", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("?\?", OPERATOR_LOGICAL, NONE, NONE, 0)

// Comparison operators
DEF_TYPE("==", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("===", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("!==", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("instanceof", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("in", OPERATOR_COMPARISON, NONE, NONE, 0)

// Assignment operators
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("**=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE(">>>=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("&&=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("||=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("?\?=", OPERATOR_ASSIGNMENT, NONE, NONE, 0)

// Common missing constructs in JavaScript/TypeScript
DEF_TYPE("arguments", ORGANIZATION_LIST | SemanticRefinements::Organization::COLLECTION, NONE, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("'", PARSER_PUNCTUATION, NONE, NONE, 0)
DEF_TYPE("expression_statement", EXECUTION_STATEMENT, NONE, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("formal_parameters", ORGANIZATION_LIST | SemanticRefinements::Organization::COLLECTION, NONE, FUNCTION_WITH_PARAMS, 0)
DEF_TYPE("variable_declarator", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("parenthesized_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("switch_case", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("case", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("pair", LITERAL_STRUCTURED | SemanticRefinements::Structured::MAPPING, NONE, NONE, 0)
DEF_TYPE("statement_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("string_fragment", LITERAL_STRING, NONE, NONE, 0)

// Missing JavaScript/ES6+ constructs
DEF_TYPE("labeled_statement", EXECUTION_STATEMENT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("switch_default", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("default_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("switch_case", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("case_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("assignment_pattern", PATTERN_DESTRUCTURE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("object_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("array_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("rest_pattern", PATTERN_COLLECT, NONE, NONE, 0)
DEF_TYPE("spread_element", PATTERN_COLLECT, NONE, NONE, 0)
DEF_TYPE("property_assignment", LITERAL_STRUCTURED | SemanticRefinements::Structured::MAPPING, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("shorthand_property_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("computed_property_name", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("method_signature", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("property_signature", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("else_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("optional_parameter", DEFINITION_VARIABLE | SemanticRefinements::Variable::PARAMETER, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0)
DEF_TYPE("rest_parameter", PATTERN_COLLECT, FIND_IDENTIFIER, NONE, 0)

// Template literals and modern syntax
DEF_TYPE("template_substitution", LITERAL_STRING, NONE, NONE, 0)
DEF_TYPE("`", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("${", PARSER_DELIMITER, NONE, NONE, 0)

// Modern operators
DEF_TYPE("=>", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("?", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("??", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("?.", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("...", PATTERN_COLLECT, NODE_TEXT, NONE, 0)

// Module system
DEF_TYPE("import_specifier", EXTERNAL_IMPORT | SemanticRefinements::Import::SELECTIVE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("export_specifier", EXTERNAL_EXPORT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("import_clause", EXTERNAL_IMPORT, NONE, NONE, 0)
DEF_TYPE("export_clause", EXTERNAL_EXPORT, NONE, NONE, 0)
DEF_TYPE("import_default_specifier", EXTERNAL_IMPORT | SemanticRefinements::Import::MODULE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("export_default_declaration", EXTERNAL_EXPORT, NONE, NONE, 0)
DEF_TYPE("namespace_import", EXTERNAL_IMPORT | SemanticRefinements::Import::WILDCARD, FIND_IDENTIFIER, NONE, 0)

// Classes and methods
DEF_TYPE("constructor", DEFINITION_FUNCTION | SemanticRefinements::Function::CONSTRUCTOR, FIND_IDENTIFIER, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("extends", TYPE_REFERENCE, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("static", METADATA_ANNOTATION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("get", METADATA_ANNOTATION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("set", METADATA_ANNOTATION, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("new", COMPUTATION_CALL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("this", NAME_SCOPED, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("super", NAME_SCOPED, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Modern JavaScript features
DEF_TYPE("generator_function", DEFINITION_FUNCTION | SemanticRefinements::Function::ASYNC, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("generator_function_declaration", DEFINITION_FUNCTION | SemanticRefinements::Function::ASYNC, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("async_generator_function", DEFINITION_FUNCTION | SemanticRefinements::Function::ASYNC, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("meta_property", NAME_SCOPED, NODE_TEXT, NONE, 0)

// Error handling additions
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)

// TypeScript-specific type constructs
DEF_TYPE("type_annotation", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("predefined_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("required_parameter", DEFINITION_VARIABLE | SemanticRefinements::Variable::PARAMETER, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("non_null_expression", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("type_arguments", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("type_assertion", TYPE_REFERENCE, NONE, NONE, 0)

// JavaScript perfection - remaining 5,919 unclassified nodes
DEF_TYPE("\"", PARSER_DELIMITER, NONE, NONE, 0)
DEF_TYPE("regex", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("regex_pattern", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("ternary_expression", FLOW_CONDITIONAL | SemanticRefinements::Conditional::TERNARY, NONE, NONE, 0)
DEF_TYPE("shorthand_property_identifier_pattern", PATTERN_DESTRUCTURE, NODE_TEXT, NONE, 0)
DEF_TYPE("escape_sequence", LITERAL_STRING, NONE, NONE, 0)
DEF_TYPE("typeof", OPERATOR_LOGICAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("empty_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("augmented_assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("throw", ERROR_THROW, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("try", ERROR_TRY, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("catch", ERROR_CATCH, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("regex_flags", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("delete", EXECUTION_STATEMENT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("class_body", ORGANIZATION_BLOCK | SemanticRefinements::Organization::MAPPING, NONE, NONE, 0)
DEF_TYPE("of", OPERATOR_COMPARISON, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("from", EXTERNAL_IMPORT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("pair_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("switch_body", ORGANIZATION_BLOCK | SemanticRefinements::Organization::SEQUENTIAL, NONE, NONE, 0)
DEF_TYPE("switch", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("finally", ERROR_FINALLY, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("sequence_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("hash_bang_line", METADATA_COMMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("optional_chain", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("do", FLOW_LOOP, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("field_definition", DEFINITION_VARIABLE | SemanticRefinements::Variable::FIELD, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("default", FLOW_CONDITIONAL, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("object_assignment_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("with", EXECUTION_STATEMENT, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("yield", FLOW_SYNC, NONE, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("named_imports", EXTERNAL_IMPORT | SemanticRefinements::Import::SELECTIVE, NONE, NONE, 0)
DEF_TYPE("import_attribute", EXTERNAL_IMPORT, NONE, NONE, 0)

// ==============================================================================
// Parser-level semantic mappings only
// Note: Library-specific function names (map, filter, reduce, etc.) are removed
// since they're just identifiers - could be user-defined functions with different semantics
// ==============================================================================