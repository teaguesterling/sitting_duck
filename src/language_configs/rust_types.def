// Rust language node type definitions
// Format: DEF_TYPE("raw_type", semantic_type, name_strategy, value_strategy, flags)

// Source file and modules
DEF_TYPE("source_file", DEFINITION_MODULE, NONE, NONE, 0x01)
DEF_TYPE("mod_item", DEFINITION_MODULE, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("use_declaration", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0x01)
DEF_TYPE("extern_crate_declaration", EXTERNAL_IMPORT, FIND_IDENTIFIER, NONE, 0x01)
DEF_TYPE("crate", EXTERNAL_IMPORT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Function definitions
DEF_TYPE("function_item", DEFINITION_FUNCTION, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)
DEF_TYPE("closure_expression", DEFINITION_FUNCTION, FIND_ASSIGNMENT_TARGET, ARROW_FUNCTION, 0)
DEF_TYPE("function_signature_item", DEFINITION_FUNCTION, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)

// Type definitions
DEF_TYPE("struct_item", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("enum_item", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("union_item", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("trait_item", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("type_item", DEFINITION_CLASS, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)

// Implementation blocks
DEF_TYPE("impl_item", DEFINITION_CLASS, CUSTOM, CLASS_WITH_METHODS, 0x01)
DEF_TYPE("associated_type", DEFINITION_CLASS, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)

// Variable declarations
DEF_TYPE("let_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("const_item", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("static_item", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)

// Function calls and expressions
DEF_TYPE("call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("method_call_expression", COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("field_expression", COMPUTATION_ACCESS, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("index_expression", COMPUTATION_ACCESS, NONE, NONE, 0)

// Identifiers and paths
DEF_TYPE("identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("field_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)
DEF_TYPE("scoped_identifier", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("scoped_type_identifier", TYPE_REFERENCE, NODE_TEXT, NONE, 0)

// Literals
DEF_TYPE("integer_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("float_literal", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("raw_string_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("char_literal", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("boolean_literal", LITERAL_ATOMIC, NODE_TEXT, NONE, 0)
DEF_TYPE("array_expression", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("tuple_expression", LITERAL_STRUCTURED, NONE, NONE, 0)
DEF_TYPE("struct_expression", LITERAL_STRUCTURED, NONE, NONE, 0)

// Control flow
DEF_TYPE("if_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("match_expression", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("while_expression", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("for_expression", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("loop_expression", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("break_expression", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_expression", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("return_expression", FLOW_JUMP, NONE, NONE, 0)

// Pattern matching
DEF_TYPE("match_arm", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("match_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("tuple_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("struct_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("reference_pattern", PATTERN_DESTRUCTURE, NONE, NONE, 0)
DEF_TYPE("wildcard_pattern", PATTERN_COLLECT, NODE_TEXT, NONE, 0)
DEF_TYPE("range_pattern", PATTERN_COLLECT, NONE, NONE, 0)

// Types
DEF_TYPE("primitive_type", TYPE_PRIMITIVE, NODE_TEXT, NONE, 0)
DEF_TYPE("generic_type", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("reference_type", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("pointer_type", TYPE_REFERENCE, NONE, NONE, 0)
DEF_TYPE("tuple_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("array_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("function_type", TYPE_COMPOSITE, NONE, NONE, 0)
DEF_TYPE("trait_object_type", TYPE_COMPOSITE, NONE, NONE, 0)

// Generics and lifetimes
DEF_TYPE("type_parameters", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("type_parameter", TYPE_GENERIC, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("lifetime", TYPE_GENERIC, NODE_TEXT, NONE, 0)
DEF_TYPE("lifetime_parameter", TYPE_GENERIC, NODE_TEXT, NONE, 0)
DEF_TYPE("where_clause", TYPE_GENERIC, NONE, NONE, 0)

// Operators and expressions
DEF_TYPE("assignment_expression", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("compound_assignment_expr", OPERATOR_ASSIGNMENT, NONE, NONE, 0)
DEF_TYPE("binary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("unary_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("range_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)

// Blocks and statements
DEF_TYPE("block", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("expression_statement", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("macro_invocation", COMPUTATION_CALL, FIND_IDENTIFIER, NONE, 0)

// Attributes and macros
DEF_TYPE("attribute_item", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("inner_attribute_item", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)
DEF_TYPE("macro_definition", DEFINITION_FUNCTION, FIND_IDENTIFIER, NONE, 0x01)

// Unsafe and async
DEF_TYPE("unsafe_block", EXECUTION_STATEMENT, NONE, NONE, ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("async_block", FLOW_SYNC, NONE, NONE, 0)
DEF_TYPE("await_expression", FLOW_SYNC, NONE, NONE, 0)

// Visibility and modifiers
DEF_TYPE("visibility_modifier", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_PUBLIC)
DEF_TYPE("mutable_specifier", METADATA_ANNOTATION, NODE_TEXT, NONE, 0)

// Comments
DEF_TYPE("line_comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)
DEF_TYPE("block_comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)

// Rust keywords
DEF_TYPE("fn", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("let", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("mut", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("const", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("static", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("struct", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("enum", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("trait", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("impl", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("type", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("mod", DEFINITION_MODULE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("use", EXTERNAL_IMPORT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("pub", METADATA_ANNOTATION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_PUBLIC)
DEF_TYPE("if", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("match", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("loop", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("async", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("await", FLOW_SYNC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("unsafe", EXECUTION_STATEMENT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD | ASTNodeFlags::IS_UNSAFE)
DEF_TYPE("extern", EXTERNAL_IMPORT, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("where", TYPE_GENERIC, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("as", COMPUTATION_CALL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("ref", PATTERN_DESTRUCTURE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("move", COMPUTATION_EXPRESSION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("in", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("self", NAME_IDENTIFIER, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("Self", TYPE_REFERENCE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("super", NAME_IDENTIFIER, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("union", DEFINITION_CLASS, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("dyn", TYPE_COMPOSITE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Operators and punctuation
DEF_TYPE("=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("+=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("-=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("*=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("/=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("%=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("&=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("|=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("^=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE("<<=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)
DEF_TYPE(">>=", OPERATOR_ASSIGNMENT, NODE_TEXT, NONE, 0)

DEF_TYPE("==", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("!=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE("<=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)
DEF_TYPE(">=", OPERATOR_COMPARISON, NODE_TEXT, NONE, 0)

DEF_TYPE("+", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("-", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("*", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("/", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("%", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("|", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("^", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("<<", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE(">>", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)

DEF_TYPE("&&", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("!", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)

DEF_TYPE("->", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE("::", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE(".", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE("..", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("..=", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE("?", FLOW_CONDITIONAL, NODE_TEXT, NONE, 0)

// Delimiters and punctuation
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("<", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(">", PARSER_DELIMITER, NODE_TEXT, NONE, 0)

DEF_TYPE(",", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(":", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("=>", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("|", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("_", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Additional Rust constructs
DEF_TYPE("parameter", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("parameters", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("arguments", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("type_arguments", TYPE_GENERIC, NONE, NONE, 0)
DEF_TYPE("field_declaration_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("field_declaration", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("enum_variant_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("enum_variant", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("use_list", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("use_as_clause", EXTERNAL_IMPORT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("use_wildcard", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0)

// Closure and function types  
DEF_TYPE("closure_parameters", ORGANIZATION_LIST, NONE, NONE, 0)
DEF_TYPE("higher_ranked_trait_bound", TYPE_GENERIC, NONE, NONE, 0)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)