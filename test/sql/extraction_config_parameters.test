# name: test/sql/extraction_config_parameters.test
# description: Test ExtractionConfig parameters for controlling field population in AST functions
# group: [duckdb_ast]

require sitting_duck

statement ok
LOAD sitting_duck;

# Test basic functionality - all functions should accept extraction config parameters
statement ok
CREATE TABLE test_results AS 
SELECT * FROM read_ast('test/data/python/simple.py', 'python') LIMIT 0;

statement ok
DROP TABLE test_results;

# Test 1: read_ast function with extraction config parameters
query IIII
SELECT name, start_line, parent_id, peek
FROM read_ast('test/data/python/simple.py', 'python', 
    context := 'none', 
    source := 'none', 
    structure := 'none', 
    peek := 'none')
LIMIT 3;
----
NULL	0	NULL	NULL
NULL	0	NULL	NULL
NULL	0	NULL	NULL

# Test 2: read_ast with partial enablement
query IIII
SELECT name, start_line, parent_id, peek
FROM read_ast('test/data/python/simple.py', 'python', 
    context := 'normalized', 
    source := 'lines', 
    structure := 'minimal', 
    peek := 'smart')
LIMIT 3;
----
NULL	1	NULL	def hello():
hello	1	0	def hello():
NULL	1	1	def

# Test 3: read_ast with full enablement
query IIIII
SELECT name, start_line, start_column, children_count, peek
FROM read_ast('test/data/python/simple.py', 'python', 
    context := 'native', 
    source := 'full', 
    structure := 'full', 
    peek := 'none')
LIMIT 2;
----
NULL	1	1	4	NULL
hello	1	1	5	NULL

# Test 4: Removed read_ast_hierarchical (deprecated)

# Test 5: parse_ast function with extraction config
query IIII
SELECT name, start_line, parent_id, peek
FROM parse_ast('def hello(): pass', 'python', 
    context := 'normalized', 
    source := 'lines', 
    structure := 'minimal', 
    peek := 'smart')
LIMIT 3;
----
NULL	1	NULL	def hello(): pass
hello	1	0	def hello(): pass
NULL	1	1	def

# Test 6: parse_ast with all features disabled
query IIII
SELECT name, start_line, parent_id, peek
FROM parse_ast('def hello(): pass', 'python', 
    context := 'none', 
    source := 'none', 
    structure := 'none', 
    peek := 'none')
LIMIT 3;
----
NULL	0	NULL	NULL
NULL	0	NULL	NULL
NULL	0	NULL	NULL

# Test 7: parse_ast_flat function with flat schema
query IIII
SELECT name, start_line, parent_id, peek
FROM parse_ast_flat('def hello(): pass', 'python', 
    context := 'none', 
    source := 'none', 
    structure := 'none', 
    peek := 'none')
LIMIT 3;
----
NULL	0	NULL	NULL
NULL	0	NULL	NULL
NULL	0	NULL	NULL

# Test 8: parse_ast_flat with features enabled
query IIII
SELECT name, start_line, parent_id, peek
FROM parse_ast_flat('def hello(): pass', 'python', 
    context := 'normalized', 
    source := 'lines', 
    structure := 'minimal', 
    peek := 'smart')
LIMIT 3;
----
NULL	1	NULL	def hello(): pass
hello	1	0	def hello(): pass
NULL	1	1	def

# Test 9: Unified peek parameter with integer value
query II
SELECT name, LENGTH(peek) as peek_len
FROM parse_ast('def very_long_function_name_for_testing(): pass', 'python', 
    peek := 10)
WHERE name = 'very_long_function_name_for_testing'
LIMIT 1;
----
very_long_function_name_for_testing	10

# Test 10: Unified peek parameter with string values
query II
SELECT name, peek
FROM parse_ast('def hello(): pass', 'python', 
    peek := 'none')
WHERE name = 'hello'
LIMIT 1;
----
hello	NULL

# Test 11: Source level progression
query II
SELECT file_path, start_line
FROM parse_ast('def hello(): pass', 'python', source := 'none')
LIMIT 1;
----
(empty)	0

query II
SELECT file_path, start_line  
FROM parse_ast('def hello(): pass', 'python', source := 'path')
LIMIT 1;
----
<inline>	0

query II
SELECT file_path, start_line
FROM parse_ast('def hello(): pass', 'python', source := 'lines')
LIMIT 1;
----
<inline>	1

# Test 12: Structure level progression
query II
SELECT parent_id, children_count
FROM parse_ast('def hello(): pass', 'python', structure := 'none')
LIMIT 1;
----
NULL	0

query II
SELECT parent_id, children_count
FROM parse_ast('def hello(): pass', 'python', structure := 'minimal')
WHERE parent_id IS NOT NULL
LIMIT 1;
----
0	0

query II
SELECT parent_id, children_count
FROM parse_ast('def hello(): pass', 'python', structure := 'full')
WHERE parent_id IS NOT NULL
LIMIT 1;
----
0	(empty)

# Test 13: Context level progression
query II
SELECT name, semantic_type
FROM parse_ast('def hello(): pass', 'python', context := 'none')
LIMIT 1;
----
(empty)	0

query II
SELECT name, semantic_type
FROM parse_ast('def hello(): pass', 'python', context := 'normalized')
WHERE name = 'hello'
LIMIT 1;
----
hello	(empty)