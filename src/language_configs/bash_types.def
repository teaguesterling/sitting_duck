// Bash language node type definitions
// Format: DEF_TYPE(raw_type, semantic_type, name_strategy, value_strategy, flags)

// Program structure
DEF_TYPE("program", DEFINITION_MODULE, NONE, NONE, 0x01)

// Function definitions
DEF_TYPE("function_definition", DEFINITION_FUNCTION, FIND_IDENTIFIER, FUNCTION_WITH_PARAMS, 0x01)

// Variable declarations and assignments
DEF_TYPE("variable_assignment", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("declaration_command", DEFINITION_VARIABLE, FIND_IDENTIFIER, VARIABLE_WITH_TYPE, 0x01)
DEF_TYPE("unset_command", DEFINITION_VARIABLE, FIND_IDENTIFIER, NONE, 0)

// Commands and execution
DEF_TYPE("command", EXECUTION_STATEMENT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("simple_command", EXECUTION_STATEMENT, FIND_IDENTIFIER, NONE, 0)
DEF_TYPE("pipeline", EXECUTION_STATEMENT, NONE, NONE, 0)
DEF_TYPE("command_substitution", COMPUTATION_CALL, NONE, NONE, 0)
DEF_TYPE("process_substitution", COMPUTATION_CALL, NONE, NONE, 0)

// Control flow
DEF_TYPE("if_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("case_statement", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("while_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("c_style_for_statement", FLOW_LOOP, NONE, NONE, 0)
DEF_TYPE("break_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("continue_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("return_statement", FLOW_JUMP, NONE, NONE, 0)
DEF_TYPE("exit_statement", FLOW_JUMP, NONE, NONE, 0)

// Expansions and substitutions
DEF_TYPE("expansion", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("simple_expansion", COMPUTATION_ACCESS, NODE_TEXT, NONE, 0)
DEF_TYPE("string_expansion", COMPUTATION_ACCESS, NONE, NONE, 0)
DEF_TYPE("arithmetic_expansion", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("brace_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)

// String literals and quoting
DEF_TYPE("string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("raw_string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("ansii_c_string", LITERAL_STRING, NODE_TEXT, NONE, 0)
DEF_TYPE("concatenation", LITERAL_STRING, NODE_TEXT, NONE, 0)

// Numbers and arrays
DEF_TYPE("number", LITERAL_NUMBER, NODE_TEXT, NONE, 0)
DEF_TYPE("array", LITERAL_STRUCTURED, NONE, NONE, 0)

// Identifiers and variables
DEF_TYPE("variable_name", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)
DEF_TYPE("word", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)

// File operations and redirections
DEF_TYPE("file_redirect", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0)
DEF_TYPE("heredoc_redirect", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0)
DEF_TYPE("herestring_redirect", EXTERNAL_IMPORT, NODE_TEXT, NONE, 0)

// Comments
DEF_TYPE("comment", METADATA_COMMENT, NODE_TEXT, NONE, 0x08)

// Special constructs
DEF_TYPE("subshell", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("compound_statement", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("do_group", ORGANIZATION_BLOCK, NONE, NONE, 0)
DEF_TYPE("else_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("elif_clause", FLOW_CONDITIONAL, NONE, NONE, 0)
DEF_TYPE("case_item", FLOW_CONDITIONAL, NONE, NONE, 0)

// Test expressions and conditions
DEF_TYPE("test_command", COMPUTATION_EXPRESSION, NONE, NONE, 0)
DEF_TYPE("binary_expression", OPERATOR_COMPARISON, NONE, NONE, 0)
DEF_TYPE("unary_expression", OPERATOR_LOGICAL, NONE, NONE, 0)
DEF_TYPE("postfix_expression", OPERATOR_ARITHMETIC, NONE, NONE, 0)
DEF_TYPE("parenthesized_expression", COMPUTATION_EXPRESSION, NONE, NONE, 0)

// Operators and punctuation
DEF_TYPE("&&", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("||", OPERATOR_LOGICAL, NODE_TEXT, NONE, 0)
DEF_TYPE("|", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("&", OPERATOR_ARITHMETIC, NODE_TEXT, NONE, 0)
DEF_TYPE(";", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE(";;", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)
DEF_TYPE("(", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE(")", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("{", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("}", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("[", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("]", PARSER_DELIMITER, NODE_TEXT, NONE, 0)
DEF_TYPE("$", PARSER_PUNCTUATION, NODE_TEXT, NONE, 0)

// Bash keywords
DEF_TYPE("if", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("then", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("else", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("elif", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("fi", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("case", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("esac", FLOW_CONDITIONAL, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("for", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("while", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("until", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("do", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("done", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("in", FLOW_LOOP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("function", DEFINITION_FUNCTION, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("return", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("break", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("continue", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("exit", FLOW_JUMP, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("local", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("declare", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("readonly", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)
DEF_TYPE("export", DEFINITION_VARIABLE, NODE_TEXT, NONE, ASTNodeFlags::IS_KEYWORD)

// Special variables and built-ins
DEF_TYPE("special_variable_name", NAME_IDENTIFIER, NODE_TEXT, NONE, 0)

// Error handling
DEF_TYPE("ERROR", PARSER_SYNTAX, NODE_TEXT, NONE, 0)